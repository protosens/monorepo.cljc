{:min-bb-version
 "0.8.0"


 ;; Required by the `doc:module` task.
 ;;
 :pods
 {clj-kondo/clj-kondo {:version "2023.12.15"}}


 ;;;;;


 :tasks
 {


  deps
  {:doc      "Prepares `deps.edn` for the given aliases"
   :requires ([protosens.maestro]
              [protosens.maestro.plugin.kaocha])
   :task     (do
               (-> (protosens.maestro/sync)
                   (protosens.maestro.plugin.kaocha/sync))
               (run 'deps:bb))}


  deps:bb
  {:doc      "Syncs `bb.edn` with `bb.maestro.edn` and `deps.maestro.edn`"
   :requires ([protosens.maestro.plugin.bb])
   :task     (protosens.maestro.plugin.bb/sync :module/task)}


  deps:bb:check
  {:doc      "Checks if `bb.edn` is in sync with `bb.maestro.edn` and `deps.maestro.edn`"
   :requires ([protosens.maestro.plugin.bb])
   :task     (protosens.maestro.plugin.bb/check :module/task)}


  deps:cve
  {:doc      "Analyses dependencies from `deps.edn` for vulnerabilities (must contain `:ext/nvd-clojure`)"
   :requires ([protosens.task.cve])
   :task     (protosens.task.cve/check)}


  deps:newest
  {:doc  "Searches for newest versions of external dependencies"
   :task (do
            (binding [*command-line-args* [":GOD"]]
              (run 'deps))
            (clojure "-T:ext/antq antq.tool/outdated"))}


  gitlib
  {:doc      "Generates custom `deps.edn` files for public modules"
   :requires ([protosens.maestro.plugin.gitlib])
   :task     (protosens.maestro.plugin.gitlib/expose)}


  gitlib:local
  {:doc      "Like `gitlib` but dependencies to other modules are expressed using file paths"
   :requires ([protosens.maestro.plugin.gitlib])
   :task     (protosens.maestro.plugin.gitlib/expose-local)}


  lint
  {:doc      "Lints `:paths` from `deps.edn` with Clj-kondo"
   :requires ([protosens.maestro.plugin.clj-kondo])
   :task     (protosens.maestro.plugin.clj-kondo/lint)}


  lint:prepare
  {:doc      "Prepares everything for `lint`"
   :requires ([protosens.maestro.plugin.clj-kondo])
   :task     (protosens.maestro.plugin.clj-kondo/prepare)}


  nrepl
  {:doc  "Runs `deps.edn` with an NREPL server (must contain `:ext/nrepl`)"
   :task (clojure (str "-M:ext/nrepl "
                       (clojure.string/join " "
                                            *command-line-args*)))}


  quickdoc
  {:doc      "Generates API documentation for modules"
   :requires ([protosens.maestro.plugin.quickdoc])
   :task     (protosens.maestro.plugin.quickdoc/module+)}


  readme:listing
  {:doc      "Generates `./module/README.md`"
   :requires ([protosens.maestro.plugin.readme])
   :task     (protosens.maestro.plugin.readme/listing)}


  readme:module+
  {:doc      "Generates READMEs for all modules"
   :requires  ([protosens.maestro.plugin.readme])
   :task      (protosens.maestro.plugin.readme/module+)}


  release
  {:doc      "Prepares everything for a full release"
   :requires ([protosens.task.release])
   :task     (protosens.task.release/now)}


  test:bb
  {:doc      "Tests current `:test/...` aliases on Babashka"
   :requires ([babashka.classpath]
              [kaocha.runner]
              [protosens.classpath])
   :task     (do
               (babashka.classpath/add-classpath (protosens.classpath/compute))
               (apply kaocha.runner/-main 
                      (concat ["--config-file"
                               "kaocha.edn"]
                              *command-line-args*)))}


  test:jvm
  {:doc  "Tests current `:test/...` aliases on the JVM"
   :task (clojure (str "-M:test "
                       (clojure.string/join " "
                                            *command-line-args*)))}


  }}
