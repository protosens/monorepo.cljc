{:min-bb-version
 "0.8.0"


 ;; Required by the `doc:module` task.
 ;;
 :pods
 {clj-kondo/clj-kondo {:version "2023.12.15"}}


 ;;;;;


 :tasks
 {


  clean
  {:doc      "Deletes some temporary directories"
   :requires ([protosens.task.clean])
   :task     (protosens.task.clean/everything)}


  clj
  {:doc      "Runs `clj` by expanding aliases with Maestro"
   :requires ([protosens.maestro.task])
   :task     (protosens.maestro.task/clj)}


  clojure
  {:doc              "Runs `clojure` by expanding aliases with Maestro"
   :override-builtin true
   :requires         ([protosens.maestro.task])
   :task             (protosens.maestro.task/clojure)}


  deps
  {:doc      "Prints a graph by expanding given aliases against `deps.edn` with Maestro"
   :requires ([protosens.maestro.task])
   :task     (protosens.maestro.task/graph)}


  deps:bb
  {:doc      "Syncs `bb.edn` with `bb.maestro.edn` and `deps.maestro.edn`"
   :requires ([protosens.maestro.plugin.bb])
   :task     (protosens.maestro.plugin.bb/sync :module/task)}


  deps:bb:check
  {:doc      "Checks if `bb.edn` is in sync with `bb.maestro.edn` and `deps.maestro.edn`"
   :requires ([protosens.maestro.plugin.bb])
   :task     (protosens.maestro.plugin.bb/check :module/task)}


  deps:diff
  {:doc      "Prints aliases modified between `HEAD` and `working tree` (or given Git revs)"
   :requires ([protosens.maestro.diff])
   :task     (protosens.maestro.diff/print)}


  deps:new
  {:doc      "Searches for new versions of external dependencies"
   :requires ([protosens.task.deps.new])
   :task     (protosens.task.deps.new/check)}


  deps:nvd
  {:doc      "Analyses dependencies from `deps.edn` for vulnerabilities (must contain `:ext/nvd-clojure`)"
   :requires ([protosens.task.deps.nvd])
   :task     (protosens.task.deps.nvd/check)}


  deps:sync
  {:doc      "Syncs `deps.edn` with some other tools if necessary"
   :requires ([protosens.task.deps.sync])
   :task     (protosens.task.deps.sync/run)}


  expose
  {:doc      "Generates custom `deps.edn` files for public modules to expose them as gitlibs"
   :requires ([protosens.task.gitlib])
   :task     (protosens.task.gitlib/expose)}


  expose:local
  {:doc      "Like `expose` but dependencies to other modules are expressed using file paths (for testing)"
   :requires ([protosens.task.gitlib])
   :task     (protosens.task.gitlib/expose-local)}


  git:commit
  {:doc      "Runs `git commit` with additional checks like linting"
   :requires ([protosens.task.git])
   :task     (protosens.task.git/commit)}

  lint
  {:doc      "Lints `:paths` from `deps.edn` with Clj-kondo"
   :requires ([protosens.maestro.plugin.clj-kondo])
   :task     (protosens.maestro.plugin.clj-kondo/lint)}


  lint:prepare
  {:doc      "Prepares everything for `lint`"
   :requires ([protosens.maestro.plugin.clj-kondo])
   :task     (protosens.maestro.plugin.clj-kondo/prepare)}


  nrepl
  {:doc      "Runs `deps.edn` with an NREPL server"
   :requires ([protosens.task.nrepl])
   :task     (protosens.task.nrepl/server)}


  quickdoc
  {:doc      "Generates API documentation for modules"
   :requires ([protosens.maestro.plugin.quickdoc])
   :task     (protosens.maestro.plugin.quickdoc/module+)}


  readme:listing
  {:doc      "Generates `./module/README.md`"
   :requires ([protosens.maestro.plugin.readme])
   :task     (protosens.maestro.plugin.readme/listing)}


  readme:module+
  {:doc      "Generates READMEs for all modules"
   :requires ([protosens.maestro.plugin.readme])
   :task     (protosens.maestro.plugin.readme/module+)}


  release
  {:doc      "Prepares everything for a full release"
   :requires ([protosens.task.release])
   :task     (protosens.task.release/now)}


  shadow
  {:doc      "Runs Shadow-CLJS from `deps.edn`"
   :requires ([protosens.task.shadow])
   :task     (protosens.task.shadow/task)}


  test:bb
  {:doc      "Tests current `deps.edn` aliases on Babashka"
   :requires ([protosens.task.test.bb])
   :task     (protosens.task.test.bb/run)}


  test:browser
  {:doc      "Tests current `deps.edn` in the browser with simple compilation"
   :requires ([protosens.task.test.browser])
   :task     (protosens.task.test.browser/run)}


  test:browser:watch
  {:doc      "Like `test:browser` but in watch mode"
   :requires ([protosens.task.test.browser])
   :task     (protosens.task.test.browser/watch)}


  test:headless
  {:doc      "Tests the output of `test:playwright:*` with all supported browsers"
   :requires ([protosens.task.test.headless])
   :task     (protosens.task.test.headless/all)}


  test:headless:chromium
  {:doc      "Tests the output of `test:playwright:*` with Chromium"
   :requires ([protosens.task.test.headless])
   :task     (protosens.task.test.headless/chromium)}


  test:headless:firefox
  {:doc      "Tests the output of `test:playwright:*` with Firefox"
   :requires ([protosens.task.test.headless])
   :task     (protosens.task.test.headless/firefox)}


  test:headless:webkit
  {:doc      "Tests the output of `test:playwright:*` with Webkit"
   :requires ([protosens.task.test.headless])
   :task     (protosens.task.test.headless/webkit)}


  test:node
  {:doc      "Tests the output of `test:node:*` tasks"
   :requires ([protosens.task.test.node])
   :task     (protosens.task.test.node/run)}


  test:node:advanced
  {:doc      "Like `test:node:simple` but uses advanced compilation"
   :requires ([protosens.task.test.node])
   :task     (protosens.task.test.node/advanced)}


  test:node:simple
  {:doc      "Compiles tests from current `deps.edn` for Node"
   :requires ([protosens.task.test.node])
   :task     (protosens.task.test.node/simple)}


  test:node:watch
  {:doc      "Compiles tests from current `deps.edn` and runs them on Node in watch mode"
   :requires ([protosens.task.test.node])
   :task     (protosens.task.test.node/watch)}


  test:jvm
  {:doc      "Tests current `deps.edn` on the JVM"
   :requires ([protosens.task.test.jvm])
   :task     (protosens.task.test.jvm/run)}


  test:jvm:watch
  {:doc      "Like `test:jvm` but in watch mode"
   :requires ([protosens.task.test.jvm])
   :task     (protosens.task.test.jvm/run ["--watch"])}


  test:playwright:advanced
  {:doc      "Like `test:playwright:simple` but uses advanced compilation"
   :requires ([protosens.task.test.playwright])
   :task     (protosens.task.test.playwright/compile "release")}


  test:playwright:simple
  {:doc      "Compiles tests from `deps.edn` for headless browser testing with `test:headless:*` tasks"
   :requires ([protosens.task.test.playwright])
   :task     (protosens.task.test.playwright/compile "compile")}


  }}
