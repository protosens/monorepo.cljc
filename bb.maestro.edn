{:min-bb-version
 "0.8.0"


 ;; Required by the `doc:module` task.
 ;;
 :pods
 {clj-kondo/clj-kondo {:version "2022.09.08"}}


 ;;;;;


 :tasks
 {aliases
  {:doc           "Print all required aliases"
   :protosens/doc "Given an alias or a vector of aliases and profiles, prints all necessary
                   aliases, following `:maestro/require` in `deps.edn`.

                        bb aliases :module/maestro
                        bb aliases '[dev :module/maestro]'
                    
                   Based on `protosens.maestro/task`.
                   Also accepts a mode, see available ones in `deps.edn`:
                    
                        bb aliases :dev :module/maestro"
   :requires      ([protosens.maestro])
   :task          (protosens.maestro/main)}


  api
  {:doc           "Generate documentation for modules"
   :protosens/doc "Generate a markdown file for each module specifying a path via
                   `:maestro.plugin.quickdoc.path/output`.
                   
                   It will contain a full description of all namespaces belonging to the module,
                   with vars and usage."
   :requires      ([protosens.maestro.plugin.quickdoc])
   :task          (protosens.maestro.plugin.quickdoc/module+)}


  api:bundle
  {:doc           "Bundle the given vector of aliases and generate a single documentation"
   :protosens/doc "Similar to the `api` task but all the `:extra-paths` of the input aliases
                   will be merged and only one markdown file will be generated under `./API.md`."
   :requires      ([protosens.maestro.plugin.quickdoc])
   :task          (protosens.maestro.plugin.quickdoc/bundle)}


  build
  {:doc           "Build the given module"
   :protosens/doc "Based on information located in the alias data in `deps.edn`.
                   See the `$.maestro.plugin.build` namespace."
   :requires      ([protosens.maestro.plugin.build])
   :task          (protosens.maestro.plugin.build/main :module/maestro.plugin.build)}


  changelog+
  {:doc           "Template all changelogs with the last stable tag"
   :protosens/doc "Changelogs use `{{ next-release }}` as a placeholder for the next
                   stable tag."
   :requires      ([protosens.task.changelog])
   :task          (protosens.task.changelog/main)}


  deps
  {:doc      ""
   :requires ([protosens.maestro]
              [protosens.maestro.plugin.kaocha])
   :task     (-> (protosens.maestro/run)
                 (protosens.maestro.plugin.kaocha/run)
                 )}


  expose
  {:doc           "Expose modules meant to be consumed as Git libraries"
   :protosens/doc "By generating a custom `deps.edn` file in the `:meastro/root` of aliases that
                   have a `:maestro.git.lib/name`.
                   
                   Consumers can then require the repository as a Git dependency and point to a
                   particular module using `:deps/root`."
   :requires      ([protosens.maestro.module.expose])
   :task          (protosens.maestro.module.expose/deploy)}


  expose:local
  {:doc           "Like `expose` but Git URL will point to the repository directory"
   :protosens/doc "Only for testing.
                  
                   Allows testing exposition and running tasks like `req:verify` without having
                   to push commits."
   :requires      ([protosens.maestro.module.expose])
   :task          (protosens.maestro.module.expose/deploy-local)}


  help
  {:doc           "Print documentation for the given task"
   :protosens/doc "If there is any."
   :requires      ([protosens.bb.help])
   :task          (-> (protosens.bb.help/task)
                      (protosens.bb.help/print))}


  help:missing
  {:doc      "Print tasks that do no have extra documentation"
   :requires ([protosens.bb.help])
   :task     (-> (protosens.bb.help/undocumented-task+)
                 (protosens.bb.help/print))}


  module:listing
  {:doc           "Generate `./module/README.md`"
   :protosens/doc "Lists all exposed and private modules."
   :requires      ([protosens.maestro.idiom.listing])
   :task          (protosens.maestro.idiom.listing/main "module/README.md")}


  module:readme
  {:doc           "Generate READMEs for all modules"
   :protosens/doc "For each module, writes a header composed of the root and relevant information (link to
                   API, Git dependency info, etc).

                   If `./doc/README.md` exists relative to the root, its content is appended."
   :requires       ([protosens.maestro.idiom.readme])
   :task           (protosens.maestro.idiom.readme/main)}


  lint
  {:doc           "Lint Clojure code throughout the whole repository"
   :protosens/doc "Using `clj-kondo` which must be accessible in the terminal.

                   See the `lint:prepare` task which is necessary for initialization."
   :requires      ([protosens.maestro.plugin.clj-kondo])
   :task          (protosens.maestro.plugin.clj-kondo/lint)}


  lint:prepare
  {:doc           "Prepare for `lint`"
   :protosens/doc "Must be called prior to using the `lint` task and ideally when dependencies are
                   updated. This will lint and cache dependencies as well as copying configuration
                   files."
   :requires      ([protosens.maestro.plugin.clj-kondo])
   :task          (protosens.maestro.plugin.clj-kondo/prepare)}


  pprint-cp
  {:doc           "Pretty-print the classpath received from STDIN"
   :protosens/doc "Useful in combination with `-Spath`. For instance:
                 
                       clojure -Spath -A$( bb aliases :module/maestro ) | bb pprint-cp
                   
                   In reality, it will pretty print any string where items are separated by `:`.
                   
                       bb aliases :module/maestro | bb pprint-cp"
   :requires      ([protosens.classpath])
   :task          (protosens.classpath/pprint)}


  stable:tag
  {:doc      "Tag the last commit as a stable release"
   :requires ([protosens.maestro.idiom.stable])
   :task     (println (protosens.maestro.idiom.stable/tag-add))}


  }}
