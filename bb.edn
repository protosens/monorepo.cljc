{:deps
 {protosens/maestro {:local/root "module/maestro"}}
 

 :pods
 {clj-kondo/clj-kondo {:version "2022.02.09"}}


 :tasks
 {aliases
  {:doc      "Print all required aliases"
   :requires ([protosens.maestro])
   :task     (protosens.maestro/task)}

  build
  {:doc      "Build the given module"
   :requires ([protosens.maestro.plugin.build])
   :task     (protosens.maestro.plugin.build/task :tool/maestro)}

  dev
  {:doc      "Starts dev mode with the given module(s)"
   :requires ([protosens.maestro])
   :task     (protosens.maestro/clojure "-M"
                                        {:maestro/mode :dev})}

  doc:module
  {:doc      "Generate documentation for modules"
   :requires ([protosens.maestro.plugin.quickdoc])
   :task     (protosens.maestro.plugin.quickdoc/module+)}

  doc:module:bundle
  {:doc      "Bundle the given vector of aliases and generate a single documentation"
   :requires ([protosens.maestro.plugin.quickdoc])
   :task     (protosens.maestro.plugin.quickdoc/bundle)}

  doc:task
  {:doc      "Print documentation for the given task"
   :requires ([protosens.maestro.doc])
   :task     (protosens.maestro.doc/print-task "doc/task")}

  expose
  {:doc      "Expose modules meant to be consumed as Git libraries"
   :requires ([protosens.maestro.git.lib])
   :task     (protosens.maestro.git.lib/task)}

  install
  {:doc      "Deploy the given module to the local Maven repository"
   :requires ([protosens.maestro.plugin.deps-deploy])
   :task     (protosens.maestro.plugin.deps-deploy/local :ext/deps-deploy)}

  M
  {:doc      "Executes `clojure` with `-M` and the required aliases"
   :requires ([protosens.maestro])
   :task     (protosens.maestro/clojure "-M")}

  lint
  {:doc      "Lint Clojure code throughout the whole repository"
   :requires ([protosens.maestro.plugin.clj-kondo])
   :task     (protosens.maestro.plugin.clj-kondo/lint)}

  lint:prepare
  {:doc      "Prepare for `lint`"
   :requires ([protosens.maestro.plugin.clj-kondo])
   :task     (protosens.maestro.plugin.clj-kondo/prepare)}

  pprint-cp
  {:doc      "Pretty-print the classpath received from STDIN"
   :requires ([protosens.maestro.classpath])
   :task     (protosens.maestro.classpath/pprint)}

  test
  {:doc      "Tests the given module(s)"
   :requires ([protosens.maestro])
   :task     (protosens.maestro/clojure "-M"
                                        {:maestro/mode :test})}

  X
  {:doc      "Executes `clojure` with `-X` and the required aliases"
   :requires ([protosens.maestro])
   :task     (protosens.maestro/clojure "-X")}

  }}
