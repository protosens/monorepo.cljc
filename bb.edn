{:deps
 {local/babashka {:local/root "module/babashka"}}
 

 :pods
 {clj-kondo/clj-kondo {:version "2022.09.08"}}


 :tasks
 {aliases
  {:doc         "Print all required aliases"
   :maestro/doc "Given an alias or a vector of aliases and profiles, prints all necessary
                 aliases, following `:maestro/require` in `deps.edn`.

                      bb aliases :module/maestro
                      bb aliases '[dev :module/maestro]'
                  
                 Based on `protosens.maestro/task`.
                 Also accepts a mode, see available ones in `deps.edn`:
                  
                      bb aliases :dev :module/maestro"
   :requires    ([protosens.maestro])
   :task        (protosens.maestro/task)}


  build
  {:doc         "Build the given module"
   :maestro/doc "Based on information located in the alias data in `deps.edn`.
                 See the `$.maestro.plugin.build` namespace."
   :requires    ([protosens.maestro.plugin.build])
   :task        (protosens.maestro.plugin.build/task :tool/maestro)}


  dev
  {:doc         "Starts dev mode with the given module(s)"
   :maestro/doc "Shortcut for launching dev mode given an alias or a vector of aliases and profiles.
           
                 For instance, this:
                 
                     bb dev :module/maestro
                 
                 Is equivalent to:
                 
                     clojure -M$( bb aliases :dev :module/maestro )"

   :requires    ([protosens.maestro])
   :task        (protosens.maestro/clojure "-M"
                                           {:maestro/mode :dev})}


  doc:module
  {:doc         "Generate documentation for modules"
   :maestro/doc "Generate a markdown file for each module specifying a path via
                 `:maestro.plugin.quickdoc.path/output`.
                 
                 It will contain a full description of all namespaces belonging to the module,
                 with vars and usage."
   :requires    ([protosens.maestro.plugin.quickdoc])
   :task        (protosens.maestro.plugin.quickdoc/module+)}


  doc:module:bundle
  {:doc         "Bundle the given vector of aliases and generate a single documentation"
   :maestro/doc "Similar to the `doc:module` task but all the `:extra-paths` of the input aliases
                 will be merged and only one markdown file will be generated under `./API.md`."
   :requires    ([protosens.maestro.plugin.quickdoc])
   :task        (protosens.maestro.plugin.quickdoc/bundle)}


  doc:task
  {:doc         "Print documentation for the given task"
   :maestro/doc "If there is any."
   :requires    ([protosens.maestro.doc])
   :task        (protosens.maestro.doc/print-task)}


  doc:task:report
  {:doc      "Print tasks that do no have extra documentation"
   :requires ([protosens.maestro.doc])
   :task     (protosens.maestro.doc/report-undocumented-task+)}


  expose
  {:doc         "Expose modules meant to be consumed as Git libraries"
   :maestro/doc "By generating a custom `deps.edn` file in the `:meastro/root` of aliases that
                 have a `:maestro.git.lib/name`.
                 
                 Consumers can then require the repository as a Git dependency and point to a
                 particular module using `:deps/root`."
   :requires    ([protosens.maestro.git.lib])
   :task        (protosens.maestro.git.lib/task)}


  install
  {:doc         "Deploy the given module to the local Maven repository"
   :maestro/doc "Assumes the alias has been built using the `build` task."
   :requires    ([protosens.maestro.plugin.deps-deploy])
   :task        (protosens.maestro.plugin.deps-deploy/local :ext/deps-deploy)}


  M
  {:doc         "Executes `clojure` with `-M` and the required aliases"
   :maestro/doc "The `aliases` task prints required aliases and this is typically useful in
                 combination with Clojure CLI. This task is a shortcut directly invoking Clojure
                 CLI in `-M` mode.
                 
                 Input is exactly the same but users can also add `--` and them provide arguments
                 to append.
                 
                 For instance:
                 
                     bb M :some/module -- -m some.namespace 1 2 3"
   :requires    ([protosens.maestro])
   :task        (protosens.maestro/clojure "-M")}


  lint
  {:doc         "Lint Clojure code throughout the whole repository"
   :maestro/doc "Using `clj-kondo` which must be accessible in the terminal.

                 See the `lint:prepare` task which is necessary for initialization."
   :requires    ([protosens.maestro.plugin.clj-kondo])
   :task        (protosens.maestro.plugin.clj-kondo/lint)}


  lint:prepare
  {:doc         "Prepare for `lint`"
   :maestro/doc "Must be called prior to using the `lint` task and ideally when dependencies are
                 updated. This will lint and cache dependencies as well as copying configuration
                 files."
   :requires    ([protosens.maestro.plugin.clj-kondo])
   :task        (protosens.maestro.plugin.clj-kondo/prepare)}


  pprint-cp
  {:doc         "Pretty-print the classpath received from STDIN"
   :maestro/doc "Useful in combination with `-Spath`. For instance:
               
                     clojure -Spath -A$( bb aliases :module/maestro ) | bb pprint-cp
                 
                 In reality, it will pretty print any string where items are separated by `:`.
                 
                     bb aliases:dev :module/maestro | bb pprint-cp"
   :requires    ([protosens.maestro.classpath])
   :task        (protosens.maestro.classpath/pprint)}


  test
  {:doc         "Tests the given module(s)"
   :maestro/doc "Shortcut for launching tests given an alias or a vector of aliases and profiles.

                 For instance, this:
                 
                     bb test :module/maestro
                 
                 Is equivalent to:
                 
                     clojure -M$( bb aliases :test :module/maestro )
                
                 Or even this (see the `M` task):
                
                     bb M :test :module/maestro"
   :requires    ([protosens.maestro])
   :task        (protosens.maestro/clojure "-M"
                                        {:maestro/mode :test})}


  X
  {:doc         "Executes `clojure` with `-X` and the required aliases"
   :maestro/doc "Exactly like the `M` task but invoke `-X` on Clojure CLI."
   :requires    ([protosens.maestro])
   :task        (protosens.maestro/clojure "-X")}


  }}
