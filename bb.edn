{:min-bb-version "0.8.0",
 :pods #:clj-kondo{clj-kondo {:version "2023.12.15"}},
 :tasks
 {deps
  {:doc "Prepares `deps.edn` for the given aliases",
   :requires ([protosens.maestro] [protosens.maestro.plugin.kaocha]),
   :task
   (do
    (->
     (protosens.maestro/sync)
     (protosens.maestro.plugin.kaocha/sync))
    (run 'deps:bb))},
  deps:bb
  {:doc "Syncs `bb.edn` with `bb.maestro.edn` and `deps.maestro.edn`",
   :requires ([protosens.maestro.plugin.bb]),
   :task (protosens.maestro.plugin.bb/sync :module/task)},
  deps:bb:check
  {:doc
   "Checks if `bb.edn` is in sync with `bb.maestro.edn` and `deps.maestro.edn`",
   :requires ([protosens.maestro.plugin.bb]),
   :task (protosens.maestro.plugin.bb/check :module/task)},
  deps:newest
  {:doc "Searches for newest versions of external dependencies",
   :task
   (do
    (binding [*command-line-args* [":GOD"]] (run 'deps))
    (clojure "-T:ext/antq antq.tool/outdated"))},
  deps:nvd
  {:doc
   "Analyses dependencies from `deps.edn` for vulnerabilities (must contain `:ext/nvd-clojure`)",
   :requires ([protosens.task.nvd]),
   :task (protosens.task.nvd/check)},
  gitlib
  {:doc "Generates custom `deps.edn` files for public modules",
   :requires ([protosens.maestro.plugin.gitlib]),
   :task (protosens.maestro.plugin.gitlib/expose)},
  gitlib:local
  {:doc
   "Like `gitlib` but dependencies to other modules are expressed using file paths",
   :requires ([protosens.maestro.plugin.gitlib]),
   :task (protosens.maestro.plugin.gitlib/expose-local)},
  lint
  {:doc "Lints `:paths` from `deps.edn` with Clj-kondo",
   :requires ([protosens.maestro.plugin.clj-kondo]),
   :task (protosens.maestro.plugin.clj-kondo/lint)},
  lint:prepare
  {:doc "Prepares everything for `lint`",
   :requires ([protosens.maestro.plugin.clj-kondo]),
   :task (protosens.maestro.plugin.clj-kondo/prepare)},
  nrepl
  {:doc
   "Runs `deps.edn` with an NREPL server (must contain `:ext/nrepl`)",
   :task
   (clojure
    (str
     "-M:ext/nrepl "
     (clojure.string/join " " *command-line-args*)))},
  quickdoc
  {:doc "Generates API documentation for modules",
   :requires ([protosens.maestro.plugin.quickdoc]),
   :task (protosens.maestro.plugin.quickdoc/module+)},
  readme:listing
  {:doc "Generates `./module/README.md`",
   :requires ([protosens.maestro.plugin.readme]),
   :task (protosens.maestro.plugin.readme/listing)},
  readme:module+
  {:doc "Generates READMEs for all modules",
   :requires ([protosens.maestro.plugin.readme]),
   :task (protosens.maestro.plugin.readme/module+)},
  release
  {:doc "Prepares everything for a full release",
   :requires ([protosens.task.release]),
   :task (protosens.task.release/now)},
  shadow
  {:doc "Runs Shadow-cljs from `deps.edn`",
   :requires ([protosens.process]),
   :task
   (deref
    (protosens.process/shell
     (concat ["clojure" "-M:ext/shadow-cljs"] *command-line-args*)))},
  test:bb
  {:doc "Tests current `:test/...` aliases on Babashka",
   :requires
   ([babashka.classpath] [kaocha.runner] [protosens.classpath]),
   :task
   (do
    (babashka.classpath/add-classpath (protosens.classpath/compute))
    (apply
     kaocha.runner/-main
     (concat
      ["--config-file" "test/kaocha.edn"]
      *command-line-args*)))},
  test:browser
  {:doc
   "Tests current `deps.edn` in the browser with `:ext/shadow-cljs`",
   :task
   (do
    (binding
     [*command-line-args* ["compile" ":test/browser"]]
     (run 'shadow))
    (run 'test:browser:open))},
  test:browser:advanced
  {:doc "Like `test:browser` but uses advanced compilation",
   :task
   (do
    (binding
     [*command-line-args* ["compile" ":test/browser"]]
     (run 'shadow))
    (run 'test:browser:open))},
  test:browser:open
  {:doc "Opens a browser tab for running browser tests",
   :requires ([clojure.java.browse]),
   :task (clojure.java.browse/browse-url "test/browser.html")},
  test:browser:watch
  {:doc
   "Like `test:browser` but in watch mode ; when ready, run `test:browser:open`",
   :task
   (binding
    [*command-line-args* ["watch" ":test/browser"]]
    (run 'shadow))},
  test:headless
  {:doc
   "Tests the output of `test:playwright:*` with all supported browsers",
   :requires ([protosens.process]),
   :task
   (->
    (protosens.process/shell
     ["./module/task/src/main/bash/test/headless/all.sh"])
    (protosens.process/exit-code)
    (System/exit))},
  test:headless:chromium
  {:doc "Tests the output of `test:playwright:*` with Chromium",
   :requires ([protosens.process]),
   :task
   (->
    (protosens.process/shell
     ["./module/task/src/main/bash/test/headless/chromium.sh"])
    (protosens.process/exit-code)
    (System/exit))},
  test:headless:firefox
  {:doc "Tests the output of `test:playwright:*` with Firefox",
   :requires ([protosens.process]),
   :task
   (->
    (protosens.process/shell
     ["./module/task/src/main/bash/test/headless/firefox.sh"])
    (protosens.process/exit-code)
    (System/exit))},
  test:headless:webkit
  {:doc "Tests the output of `test:playwright:*` with Webkit",
   :requires ([protosens.process]),
   :task
   (->
    (protosens.process/shell
     ["./module/task/src/main/bash/test/headless/webkit.sh"])
    (protosens.process/exit-code)
    (System/exit))},
  test:jvm
  {:doc "Tests current `:test/...` aliases on the JVM",
   :task
   (clojure
    (str
     "-M:ext/kaocha "
     (clojure.string/join " " *command-line-args*)))},
  test:jvm:watch
  {:doc "Like `test:jvm` but in watch mode",
   :task
   (binding
    [*command-line-args* (cons "--watch" *command-line-args*)]
    (run 'test:jvm))},
  test:node
  {:doc "Tests the output of `test:node:*` tasks",
   :requires ([protosens.process]),
   :task
   (->
    (protosens.process/shell ["node" "private/tmp/test_node.js"])
    (protosens.process/exit-code)
    (System/exit))},
  test:node:advanced
  {:doc "Like `test:node:compile` but uses advanced compilation",
   :task
   (binding
    [*command-line-args* ["release" ":test/node"]]
    (run 'shadow))},
  test:node:compile
  {:doc
   "Compiles tests from `deps.edn` for Node with `:ext/shadow-cljs`",
   :task
   (binding
    [*command-line-args* ["compile" ":test/node"]]
    (run 'shadow))},
  test:node:watch
  {:doc "Like `test:node` but runs tests in watch mode",
   :task
   (binding
    [*command-line-args*
     ["--config-merge" "{:autorun true}" "watch" ":test/node"]]
    (run 'shadow))},
  test:playwright:advanced
  {:doc "Like `test:playwright:compile` but uses advanced compilation",
   :task
   (binding
    [*command-line-args* ["release" ":test/playwright"]]
    (run 'shadow))},
  test:playwright:compile
  {:doc
   "Compiles tests from `deps.edn` for headless browser testing with `test:headless:*` tasks",
   :task
   (binding
    [*command-line-args* ["compile" ":test/playwright"]]
    (run 'shadow))}},
 :deps
 {org.clojure/clojure #:mvn{:version "1.11.1"},
  babashka/fs #:mvn{:version "0.5.20"},
  lambdaisland/kaocha #:mvn{:version "1.87.1366"},
  babashka/process #:mvn{:version "0.5.21"},
  selmer/selmer #:mvn{:version "1.12.59"},
  clj-kondo/clj-kondo #:mvn{:version "2023.12.15"},
  io.github.borkdude/quickdoc
  #:git{:sha "d9ac51475ea46e1caf9b059f2a72ddfeeec6111c"}},
 :paths
 ["module/task/src/main/clj/"
  "module/calver/src/main/clj/"
  "module/classpath/src/main/clj/"
  "module/process/src/main/clj/"
  "module/git/src/main/clj/"
  "module/string/src/main/clj/"
  "module/maestro/src/main/clj/"
  "module/deps.edn/src/main/clj/"
  "module/edn/src/main/clj/"
  "module/namespace/src/main/clj/"
  "module/graph.dfs/src/main/clj/"
  "module/term.style/src/main/clj/"
  "module/maestro.plugin.bb/src/main/clj/"
  "module/maestro.plugin.changelog/src/main/clj/"
  "module/maestro.plugin.clj-kondo/src/main/clj/"
  "module/maestro.plugin.gitlib/src/main/clj/"
  "module/maestro.plugin.kaocha/src/main/clj/"
  "module/maestro.plugin.quickdoc/src/main/clj/"
  "module/maestro.plugin.readme/src/main/clj/"]}
